/*Needed var/arrs
world[] -- stores order of rooms and randomizes after full loop
level[] -- stores and builds the rooms*/
function Level()
{
    this.room1 = [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],//points
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],//mid
        [0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,2,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0],
        [0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ]
    this.room2 = [
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0],//points
        [0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0],//mid
        [0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
]
    this.room3 = [
        [2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2],
        [2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2],
        [0,0,0,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//points
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//mid
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],
        [2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2],
        [2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2],
]

    this.shop = [[]]
    
    this.world = [this.room1,this.room2,this.room3];
    this.grid = [];
    this.bShip = [];
    this.shipTarget =[];

    this.x =0;
    this.y =0;

    this.generate = function(level,width,height,offset)
    {
        var tileWidth;
        var tileHeight;

        if(width != undefined)
		{
			tileWidth = width;
		}
		else
		{
			tileWidth = canvas.width/level[0].length;
		}
		
		if(height != undefined)
		{
			tileHeight = height;
		}
		else
		{
			tileHeight = canvas.height/level.length;
		}
        if(offset != undefined)
        {
            offset = offset;
        }
        else
        {
            offset=0;
        }

        var g =0;
        var e =0;
        var x = tileWidth/2+(canvas.width*offset);
        var y = tileHeight/2;

        for(var r =0;r<level.length;r++)
        {
            for(var c =0;c<level[r].length;c++)
            {
                switch(level[r][c])
                {
                    case 0:
                        break;
                    case 1:
                        player.x = x;
                        player.y = y;
                        break;
                    case 2:
                        this.grid[g]= new GameObject({width:tileWidth, height:tileHeight});
                        this.grid[g].x=x;
                        this.grid[g].y=y;
                        this.grid[g].color = "brown";
                       g++;
                    break;
                    case 3:
                        this.bShip[e]= new GameObject({width:tileWidth*2, height:tileHeight});
                        this.bShip[e].x=x;
                        this.bShip[e].y=y;
                        this.bShip[e].color = "brown";
                        this.bShip[e].teamColor = "red";
                        this.bShip[e].alive++;
                        this.shipTarget[e] =new GameObject({width:15,height:15});
                        this.shipTarget[e].x=this.bShip[e].x;
                        this.shipTarget[e].y=this.bShip[e].y;
                        e++;
                        break;
                }
                x+=tileWidth;
            }
            y+=tileHeight;
            x=tileWidth/2+(canvas.width*offset);
        }
    }
}