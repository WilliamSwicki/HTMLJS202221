/*Needed var/arrs
world[] -- stores order of rooms and randomizes after full loop
level[] -- stores and builds the rooms*/
function Level()
{
    this.room1 = [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],//points
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],//mid
        [0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ]
    this.room2 = [
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0],//points
        [0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0],//mid
        [0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
]
    this.room3 = [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//points
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],//mid
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
]
    this.shop = [[]]

    this.grid = [];

    this.x =0;
    this.y =0;

    this.generate = function(level)
    {
        var tileWidth;
        var tileHeight;

        tileWidth = canvas.width/level[0].length;
        tileHeight = canvas.height/level.length;

        var g =0;
        var x = tileWidth/2;
        var y = tileHeight/2;

        for(var r =0;r<level.length;r++)
        {
            for(var c =0;c<level[r].length;c++)
            {
                switch(level[r][c])
                {
                    case 0:
                        break;
                    case 1:
                        player.x = x;
                        player.y = y;
                        break;
                    case 2:
                        this.grid[g]= new GameObject({width:tileWidth, height:tileHeight});
                        this.grid[g].x=x;
                        this.grid[g].y=y;
                        this.grid[g].color = "brown";
                       g++;
                    break;
                }
                x+=tileWidth;
            }
            y+=tileHeight;
            x=tileWidth/2;
        }
    }
}